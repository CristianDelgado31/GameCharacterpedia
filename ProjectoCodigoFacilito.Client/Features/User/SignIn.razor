@page "/sign-in"
@using ProjectoCodigoFacilito.Client.Features.Components
@using ProjectoCodigoFacilito.Client.Models.UserModel;
@using ProjectoCodigoFacilito.Client.Services.Interfaces

@inject IUserService userService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Sign In</PageTitle>

<form class="form-container" @onsubmit="CheckUser">
    <h1>Sign In</h1>
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" id="email" class="form-control" @bind="user.Email" required/>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" class="form-control" @bind="user.Password" required/>
    </div>
    <button type="submit" class="btn btn-primary">Sign In</button>
    <p>Not a user yet? <a href="/create-user">Sign up!</a></p>
</form>

@if (Message != null)
{
    <p class="response-message">@Message</p>
}

@code {
    private SignInUserModel user = new SignInUserModel();
    private string Message;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // navigationManager.NavigateTo("/get-all-characters");
            navigationManager.NavigateTo("/");
        }
    }

    private async Task CheckUser()
    {
        var result = await userService.SignInUser(user);

        if(result.Error != null)
        {
            Message = result.Error;
        }
        else
        {
            // // navigationManager.NavigateTo("/get-all-characters");
            await ReloadPage();
        }
    }

    private async Task ReloadPage()
    {
        await JSRuntime.InvokeVoidAsync("window.location.reload");
    }
}



<style>
    /* Estilo para el formulario */
    .form-container {
        max-width: 400px;
        margin: auto;
        margin-top: 60px;
        padding: 40px;
        padding-bottom: 50px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    /* Estilo para los campos de entrada */
    .form-control {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    /* Estilo para el botón de enviar */
    .btn {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        margin-top: 40px;
        border: none;
        border-radius: 4px;
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    /* Estilo para el mensaje de respuesta */
    .response-message {
        margin-top: 10px;
        color: #4CAF50;
        font-weight: bold;
    }

    /* Estilo para las etiquetas */
    label {
        display: block;
        margin-bottom: 5px;
    }

    h1 {
        text-align: center;
        margin-top: 20px;
    }

    p{
        text-align: center;
    }
</style>