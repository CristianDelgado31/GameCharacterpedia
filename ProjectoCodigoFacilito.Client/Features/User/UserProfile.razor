@page "/profile"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using ProjectoCodigoFacilito.Client.Features.Components
@using ProjectoCodigoFacilito.Client.Models.UserModel
@using ProjectoCodigoFacilito.Client.Services.Interfaces
@inject ILocalStorageService localStorage
@inject IUserService userService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<CheckExpirationToken />
<PageTitle>Profiles</PageTitle>
<div class="container profile-container">
    <div class="col-md-6 profile-card">
        <div class="profile-title">
            <h1>Your Profile</h1>
            <button class="btn btn-danger btn-logout" @onclick="Logout">Logout</button>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="profile-item">
                    <strong>Name:</strong> @Profile.Name
                </div>
                <div class="profile-item">
                    <strong>Email:</strong> @Profile.Email
                </div>
                <div class="profile-item">
                    <strong type="password">Password:</strong> @passwordType 
                        <i class="fa fa-eye" @onclick="TogglePasswordVisibility"></i>
                </div>
                <div class="profile-item">
                    <strong>Role:</strong> @Profile.Role
                </div>
                <!-- Contenedor para los botones "Modify" y "Delete User" -->
                <div class="profile-item text-center">
                    <button class="btn btn-primary btn-modify" @onclick="ShowForm">Modify</button>
                    <!-- Botón "Delete User" -->
                    <button class="btn btn-danger btn-delete ml-2" style="@(showForm ? "display: none;" : "")" @onclick="DeleteUser">Delete User</button>
                </div>
            </div>
        </div>
        <div class="card mt-4" style="@(showForm ? "" : "display: none;")">
            <div class="card-body">
                <h2 class="text-center mb-4">Complete the fields</h2>
                <form @onsubmit="UpdateProfile">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="name" placeholder="Enter your name" @bind=updateProfile.Name required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" class="form-control" id="email" placeholder="Enter your email" @bind=updateProfile.Email required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" class="form-control" id="password" placeholder="Enter your password" @bind=updateProfile.Password required>
                    </div>
                    <button type="submit" class="btn-submit">Confirm</button>
                </form>

            </div>
        </div>
    </div>
</div>
@if (responseMessage != null)
{
    <p class="response-message">@responseMessage</p>
}

@code {
    private SignInUserModel Profile = new SignInUserModel();
    private SignInUserModel updateProfile = new SignInUserModel();
    private bool showForm = false;
    private string passwordType = "****";
    private bool showPassword = false;
    private string? responseMessage;

    protected override async Task OnInitializedAsync()
    {
        Profile = await localStorage.GetItemAsync<SignInUserModel>("UserFavouriteCharacters") ?? new SignInUserModel();
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/logout");
    }

    private async Task UpdateProfile()
    {
        Console.WriteLine("Update profile");

        //Editar los cambios en Profile
        var sendUpdateProfile = new SignInUserModel
        {
            Id = Profile.Id,
            Name = updateProfile.Name,
            Email = updateProfile.Email,
            Password = updateProfile.Password,
            Role = Profile.Role,
            ListFavoriteCharacters = Profile.ListFavoriteCharacters
        };

        // //Guardar los cambios en el local storage
        // await localStorage.SetItemAsync("UserFavouriteCharacters", Profile);
        //Hacer los cambios en la base de datos
        var result = await userService.UpdateProfile(sendUpdateProfile);
        if(result.Error != null)
        {
            responseMessage = result.Error;
        }
        else
        {
            NavigationManager.NavigateTo("/logout");
        }

    }

    private void ShowForm()
    {
        showForm = !showForm;

        //Si se oculta el formulario, limpiar los campos
        if (showForm == false)
        {
            updateProfile = new SignInUserModel();
            responseMessage = null;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        //Mostrar la contraseña
        if (showPassword)
            passwordType = Profile.Password;
        else
            passwordType = "****";
    }

    private async Task DeleteUser()
    {
        // Lógica para eliminar al usuario
        // Por ejemplo, realizar una llamada al servicio para eliminar el usuario
        var result = await userService.DeleteUser(Profile.Id);
        if(result.Error != null)
        {
            responseMessage = result.Error;
        }
        else
        {
            // Una vez que se ha eliminado el usuario, podrías redirigir al usuario a otra página
            NavigationManager.NavigateTo("/logout");
        };
        
    }
}

