@page "/character-operations"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using ProjectoCodigoFacilito.Client.Models.CharacterModel
@using ProjectoCodigoFacilito.Client.Services.Interfaces
@using ProjectoCodigoFacilito.Client.Features.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService localStorage
@inject ICharacterService characterService
@attribute [Authorize(Roles = "Administrator")]
 
<CheckExpirationToken />
<PageTitle>Character operations</PageTitle>
@* FORM CREATE CHARACTER *@
<div style="display: flex; flex-direction: column;">
    <div style="flex:1;">
        <EditForm Model="@createModel" OnValidSubmit="@CreateNewCharacter">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h1>Create Character</h1>
            <label>
                Name:
                <InputText @bind-Value="@createModel.Name" class="input-text" />
            </label>

            <label>
                Game:
                <InputText @bind-Value="@createModel.Game" class="input-text" />
            </label>

            <label>
                History:
                <InputText @bind-Value="@createModel.History" class="input-text" />
            </label>

            <label>
                Role:
                <InputText @bind-Value="@createModel.Role" class="input-text" />
            </label>

            <label>Image:</label>
            <InputFile OnChange="@HandleFileSelected" />
            <button type="submit" class="button-create">Create Character</button>
        </EditForm>
    </div>
    <div style="flex: 1;">
        @* FORM UPDATE CHARACTER *@
        <EditForm Model="@updateModel" OnValidSubmit="@UpdateCharacter">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h1>Update Character</h1>
                Search Name:
            <label>
                <InputText @bind-Value="@searchName" class="input-text" />
            </label>
            <label>
                New Name:
                <InputText @bind-Value="@updateModel.Name" class="input-text" />
            </label>

            <label>
                New Game:
                <InputText @bind-Value="@updateModel.Game" class="input-text" />
            </label>

            <label>
                New History:
                <InputText @bind-Value="@updateModel.History" class="input-text" />
            </label>

            <label>
                New Role:
                <InputText @bind-Value="@updateModel.Role" class="input-text" />
            </label>

            <label>New Image:</label>
            <InputFile OnChange="@HandleFileSelected" />
            <button type="submit" class="button-update">Update Character</button>
        </EditForm>
    </div>
    <div style="flex: 1;">
        @* FORM DELETE CHARACTER*@
        <EditForm Model="@deleteModel" OnValidSubmit="@Delete">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h1>Delete Character</h1>
            <label>
                Name:
                <InputText @bind-Value="@deleteModel.Name" class="input-text" />
            </label>

            <label>
                Game:
                <InputText @bind-Value="@deleteModel.Game" class="input-text" />
            </label>
            <button type="submit" class="button-delete">Delete Character</button>
        </EditForm>
    </div>
</div>

@if (responseMessage != null)
{
    <p class="response-message">@responseMessage</p>
}

@code {
    private CreateCharacterModel createModel = new CreateCharacterModel();
    private DeleteCharacterModel deleteModel = new DeleteCharacterModel();
    private UpdateCharacterModel updateModel = new UpdateCharacterModel();
    private string searchName;
    private string responseMessage;
    private IBrowserFile uploadedImage;

    private async Task CreateNewCharacter()
    {
        try
        {
            var result = await characterService.CreateCharacter(createModel, uploadedImage);
            if(result.Error != null)
            {
                responseMessage = result.Error;
            }

            createModel = new CreateCharacterModel();
            //responseMessage = null;
        }
        catch (Exception ex)
        {
            responseMessage = "Error: " + ex.Message;
        }
    }

    private async Task Delete()
    {
        try
        {
            var characterList = await localStorage.GetItemAsync<List<GetCharacterModel>>("CharactersList");
            var character = characterList.FirstOrDefault(c => c.Name == deleteModel.Name && c.Game == deleteModel.Game);
            if(character != null)
            {
                deleteModel.Id = character.Id;
                var result = await characterService.DeleteCharacter(deleteModel);

                if (result.Error != null)
                {
                    responseMessage = result.Error;
                }
                else
                {
                    responseMessage = "Character deleted";
                }
            }
            else
            {
                responseMessage = "Character not found";
            }
            deleteModel = new DeleteCharacterModel();
            
        }
        catch (Exception ex)
        {
            responseMessage = "Error: " + ex.Message;
        }
    }

    private async Task UpdateCharacter()
    {
        try
        {
            var characterList = await localStorage.GetItemAsync<List<GetCharacterModel>>("CharactersList");
            var character = characterList.FirstOrDefault(c => c.Name == searchName);
            if(character != null)
            {
                updateModel.Id = character.Id;
                var result = await characterService.UpdateCharacter(updateModel, uploadedImage);

                if (result.Error != null)
                {
                    responseMessage = result.Error;
                }
                else
                {
                    responseMessage = "Character updated";
                }

            }
            else
            {
                responseMessage = "Character not found";
            }
            searchName = string.Empty;
            updateModel = new UpdateCharacterModel();

        }
        catch (Exception ex)
        {
            responseMessage = "Error: " + ex.Message;
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedImage = e.File;
    }
}
